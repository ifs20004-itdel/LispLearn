(defun makeDate(D M Y)
	(cond	((and (and (= M 2) (= (mod Y 4) 0)) (> D 29) 'Error))
			((and (and (= M 2) (/= (mod Y 4) 0)) (> D 28) 'Error))
			((and (= M 4) (> D 30) 'Error))
			((and (= M 6) (> D 30) 'Error))
			((and (= M 9) (> D 30) 'Error))
			((and (= M 11) (> D 30) 'Error))
			((and (= M 1) (> D 31) 'Error))
			((and (= M 3) (> D 31) 'Error))
			((and (= M 5) (> D 31) 'Error))
			((and (= M 7) (> D 31) 'Error))
			((and (= M 8) (> D 31) 'Error))
			((and (= M 10) (> D 31) 'Error))
			((and (= M 12) (> D 31) 'Error))	
			(t (cons D(cons M (cons Y nil))))
	)
)

(defun nextDay (P)
  (cond ((and (= (day P) 31) (= (month P) 1)) (cons (- (day P) 30) (list (+ (month P) 1) (year P))))
		((and (and (= (day P) 28) (= (month P) 2)) (= (mod (year P) 4) 0)) (cons (+ (day P) 1) (list (month P) (year P))))
		((and (and (= (day P) 28) (= (month P) 2)) (/= (mod (year P) 4) 0)) (cons (- (day P) 27) (list (+ (month P) 1) (year P))))
		((and (and (= (day P) 29) (= (month P) 2)) (= (mod (year P) 4) 0)) (cons (- (day P) 28) (list (+ (month P) 1) (year P))))
		((and (= (day P) 31) (= (month P) 3)) (cons (- (day P) 30) (list (+ (month P) 1) (year P))))
		((and (= (day P) 31) (= (month P) 5)) (cons (- (day P) 30) (list (+ (month P) 1) (year P))))
		((and (= (day P) 31) (= (month P) 7)) (cons (- (day P) 30) (list (+ (month P) 1) (year P))))
		((and (= (day P) 31) (= (month P) 8)) (cons (- (day P) 30) (list (+ (month P) 1) (year P))))
		((and (= (day P) 31) (= (month P) 10)) (cons (- (day P) 30) (list (+ (month P) 1) (year P))))
		((and (= (day P) 31) (= (month P) 12)) (cons (- (day P) 30) (list (- (month P) 11) (+ (year P) 1))))
		((and (= (day P) 30) (= (month P) 4)) (cons (- (day P) 29) (list (+ (month P) 1) (year P))))
		((and (= (day P) 30) (= (month P) 6)) (cons (- (day P) 29) (list (+ (month P) 1) (year P))))
		((and (= (day P) 30) (= (month P) 9)) (cons (- (day P) 29) (list (+ (month P) 1) (year P))))
		((and (= (day P) 30) (= (month P) 11)) (cons (- (day P) 29) (list (+ (month P) 1) (year P))))
		(t (cons (+ (day P) 1) (list (month P) (year P))))
	)
)

(defun yesterday (P)
  (cond ((and (= (day P) 1) (= (month P) 1)) (cons (+ (day P) 30) (list (+ (month P) 11) (- (year P) 1))))
		((and (and (= (day P) 1) (= (month P) 3)) (= (mod (year P) 4) 0)) (cons (+ (day P) 28) (list (-  (month P) 1) (year P))))
		((and (and (= (day P) 1) (= (month P) 3)) (/= (mod (year P) 4) 0)) (cons (+ (day P) 27) (list (- (month P) 1) (year P))))
		((and (= (day P) 1) (= (month P) 2)) (cons (+ (day P) 30) (list (- (month P) 1) (year P))))
		((and (= (day P) 1) (= (month P) 5)) (cons (+ (day P) 29) (list (- (month P) 1) (year P))))
		((and (= (day P) 1) (= (month P) 7)) (cons (+ (day P) 29) (list (- (month P) 1) (year P))))
		((and (= (day P) 1) (= (month P) 10)) (cons (+ (day P) 29) (list (- (month P) 1) (year P))))
		((and (= (day P) 1) (= (month P) 12)) (cons (+ (day P) 29) (list (- (month P) 1) (year P))))
		((and (= (day P) 1) (= (month P) 8)) (cons (+ (day P) 30) (list (- (month P) 1) (year P))))
		((and (= (day P) 1) (= (month P) 4)) (cons (+ (day P) 30) (list (- (month P) 1) (year P))))
		((and (= (day P) 1) (= (month P) 6)) (cons (+ (day P) 30) (list (- (month P) 1) (year P))))
		((and (= (day P) 1) (= (month P) 9)) (cons (+ (day P) 30) (list (- (month P) 1) (year P))))
		((and (= (day P) 1) (= (month P) 11)) (cons (+ (day P) 30) (list (- (month P) 1) (year P))))
		(t (cons (- (day P) 1) (list (month P) (year P))))
		
	)
)

(defun isEqD (P1 P2)
	(cond ((and (= (day P1) (day P2) ) (and (= (month P1) (month P2)) (= (year P1) (year P2))))'True)
		(t 'False)
	)
)
(defun isBefore (P1 P2)
	(cond ((or (< (day P1) (day P2) ) (or (< (month P1) (month P2)) (< (year P1) (year P2))))'True)
		(t 'False)
	)
)
(defun day(Date)
	(car Date)
)
(defun month(Date)
	(car (cdr Date))
)
(defun year(Date)
	(car (cdr (cdr Date)))
)